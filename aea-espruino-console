#!/usr/bin/env python
# coding: utf-8

from aktos_dcs import *
import os
import argparse

parser = argparse.ArgumentParser(description='Get configuration values')
parser.add_argument('-b', '--baud', default=115200, help='baudrate')
parser.add_argument('-p', '--port', default="/dev/ttyUSB0", help='port to use')

args = parser.parse_args()

class TerminalEmulator(SerialPortReader):
    def prepare(self):
        print "started terminal emulator..."
        print "-----------------------------"
        print self.ser
        self.line_endings = "\n"
        self.serial_queue = Queue()

    def action(self):
        self.start_io_prompt()

        while True:
            x = self.serial_queue.get()
            print "sending serial queue: ", repr(x.encode('ascii'))
            self.send_cmd(x.encode('ascii'))

    def on_disconnect(self):
        print ""
        print "[[ Device Physically Disconnected... ]]"
        print ""

    def on_connecting(self):
        print ""
        while True:
            print "[[ Waiting for Device to be physically connected... ]]"
            sleep(30)

    def on_connect(self):
        print ""
        print "[[ Device Physically Connected... ]]"
        print ""


    def handle_LoadCode(self, msg):
        print "CODE: ", msg
        #self.send_cmd(msg["code"])
        self.serial_queue.put(msg["code"])


ProxyActor()
port = args.port
baud = int(args.baud)

print "Configuration: %s @%d baud" % (port, baud)
TerminalEmulator(port=port, baud=baud)
wait_all()
