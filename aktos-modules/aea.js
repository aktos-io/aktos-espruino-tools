// Generated by LiveScript 1.4.0
var sleep, after, looop, pack, unpack, repl, mem, out$ = typeof exports != 'undefined' && exports || this, toString$ = {}.toString;
out$.sleep = sleep = function(ms, func){
  setTimeout(func, ms);
};
out$.after = after = sleep;
out$.looop = looop = function(ms, f){
  return setInterval(f, ms);
};
out$.pack = pack = function(x){
  return JSON.stringify(x);
};
out$.unpack = unpack = function(wireData){
  return JSON.parse(wireData);
};
out$.repl = repl = {
  detach: function(){
    console.log("Disabling REPL console!");
    LoopbackA.setConsole();
  },
  attach: function(){
    ser.setConsole();
    console.log("REPL console enabled!");
  }
};
out$.merge = merge;
function merge(obj1, obj2){
  var p, tObj1, i, ref$, j;
  for (p in obj2) {
    tObj1 = toString$.call(obj1[p]).slice(8, -1);
    if (toString$.call(obj2[p]).slice(8, -1) === 'Object') {
      if (tObj1 === 'Object') {
        merge(obj1[p], obj2[p]);
      } else {
        obj1[p] = obj2[p];
      }
    } else {
      if (tObj1 === 'Array') {
        for (i in ref$ = obj2[p]) {
          j = ref$[i];
          if (obj1[p].indexOf(j) === -1) {
            obj1[p] = obj1[p].concat(j);
          }
        }
      } else if (obj2[p] !== void 8) {
        obj1[p] = obj2[p];
      } else {
        delete obj1[p];
      }
    }
  }
  console.log("merge, free: " + process.memory().free);
  return obj1;
}
out$.Led = Led;
function Led(pin){
  this.pin = pin;
  pinMode(this.pin, 'output');
  this.i = null;
}
Led.prototype.turn = function(val){
  this.stop();
  return digitalWrite(this.pin, val);
};
Led.prototype.stop = function(){
  try {
    return clearInterval(this.i);
  } catch (e$) {}
};
Led.prototype.osc = function(m){
  var __, cnt;
  __ = this;
  cnt = 0;
  this.stop();
  return this.i = setInterval(function(){
    digitalWrite(__.pin, true);
    sleep(m.t[0], function(){
      digitalWrite(__.pin, false);
      if (++cnt >= m.c) {
        return __.stop();
      }
    });
  }, m.t[0] + m.t[1]);
};
Led.prototype.wink = function(){
  var pin;
  pin = this.pin;
  this.stop();
  digitalWrite(pin, true);
  return sleep(50, function(){
    return digitalWrite(pin, false);
  });
};
Led.prototype.warn = function(){
  return this.osc({
    c: Infinity,
    t: [300, 5000]
  });
};
Led.prototype.upps = function(){
  return this.osc({
    c: 3,
    t: [50, 100]
  });
};
/*
How to calculate start addres for FlashEEPROM:

http://www.espruino.com/Reference#l_Flash_getFree

require("Flash").getFree()
=[
  { "addr": 487424, "length": 4096 },
  { "addr": 524288, "length": 4096 },
  { "addr": 1011712, "length": 36864 },
  { "addr": 1048576, "length": 3129344 }
 ]
*/
mem = new (require('FlashEEPROM'))();
mem.endAddr = mem.addr + 1024;
/*
mem =
    write: ->
    read: ->
*/
out$.Config = Config;
function Config(fileNo){
  this.fNo = fileNo;
  Config.f = mem;
  this.ram = {};
}
Config.prototype.flush = function(){
  Config.f.write(this.fNo, pack(this.ram));
  0;
};
Config.prototype.read = function(){
  var e;
  try {
    merge(this.ram, unpack(E.toString(Config.f.read(this.fNo))));
    return this.ram;
  } catch (e$) {
    return e = e$;
  }
};
